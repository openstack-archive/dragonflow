..
 This work is licensed under a Creative Commons Attribution 3.0 Unported
 License.

 http://creativecommons.org/licenses/by/3.0/legalcode

=============================================
Dragonflow API requirements and specification
=============================================

The URL of your launchpad Blueprint:

https://blueprints.launchpad.net/dragonflow/+spec/add-dragonflow-api

This blueprint states the requirements and proposes the way to provide
Dragonflow configuration management API.
Currently, Neutron API is the only way to manage Dragonflow configuration.
While this is good enough for the OpenStack environments, it limits number of
use cases where Dragonflow can be used or adds Neutron API server as a
mandatoryi required service. Native Dragonflow API support unlocks
integrations with different container Orchestration Engines, i.e. Kubernetes,
Mesos. It enables users to manipulate configuration elements exposed by the
Dragonflow SDN Controller and makes the application more robust. Since the
implementation is hidden and exposed only via the API, enhancements can be
added without causing the disruption to the application consuming the API.
Native Dragonflow API will enable new network-aware applications to provide
control over networks .


Problem Description
===================

Currently the only way to manage Dragonflow configuration elements is by using
Neutron API. As stated above, this is not enough to cover all the potential
Dragonflow  usage scenarios.
Dragonflow is an open, standards-based SDN controller that virtualises the
network and should enable automation and orchestration of the various cloud
environments and networking services. Without DragonFlow API, while the only
way is to accees the North Bound DB API, the existing applications may be
impacted upon implementation changes or enhancement additions. This will not be
the case once applications will use API.


Proposed Change
===============

Dragonflow API requirements
---------------------------
In order to satisfy different usage scenarios, the Dragonflow API support
should fulfil the following requirements.
*  Support REST design idiom by exposing Dragonflow  managed resources.

*  RESTful API should be auto-generated fro  the model's specification.

*  Follow OpenAPI Spec (OAS) for API definition.

*  Provide support for multi-tenancy via Authorization component.

*  Authentication should be optional and it should be possible to disable it
   for example during development phase.

*  Provide API for configuration and operational data models.

*  Provide API (data model) backward compatibility. This requires that only
   changes to the data model may only extend existing objects and any changes
   to the model must be incremental.

*  It should be possible to discover all API resources by querying the root.

*  Provide Python library on top of the REST API to bust applications
   development.

Data Model Object Hierarchy
---------------------------
Data Model contains different types of the objects. Objects created outside of
the Dragonflow are Configuration state.Objects generated by the Dragonflow
applications are Operational state. Some objects maybe either configured or
generated. In addition, some physical entities are represented in the data
model (i.e chassis). Dragonflow System Data Model should be well defined and
keep backward compatibility  in order to be consistent with applications
consuming the API.

TBD - add System  Data Model diagram

API Authentication
------------------
Keystone can be used for the API server authentication, it will be part of
the OpenStack deployment anyway. Other authentication service alternatives
can be considered later, therefor implementation should not make an
assumption about authentication service. It should be possible to disable
authentication.

API definition
--------------
The proposal is to use OpenAPI specification [1] to define Dragonflow API to
allow both humans and computers to discover and understand the capabilities
of the Dragonflow provided services without going to the source code or
additional documentation.

References
==========

[1] https://github.com/OAI/OpenAPI-Specification
